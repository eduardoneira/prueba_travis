#include <iostream>

#include <cassert>
#include "rocksdb/db.h"
#include "rocksdb/slice.h"
#include "rocksdb/iterator.h"
#include "rocksdb/slice_transform.h"

int main (int argc, char** argv){
    std::cout << "Empieza el Test" << std::endl;

    rocksdb::DB* db;
    rocksdb::Options options;
    options.create_if_missing = true;
    rocksdb::Status status = rocksdb::DB::Open(options, "/tmp/testdb", &db);
    assert(status.ok());

    std::cout << status.ToString() << std::endl;

    std::string value1 = "tu";
    std::string value2 = "vieja";
    std::string value3 = "chilena";
    std::string key1 = "key1";
    std::string key2 = "key2";
    std::string key3 = "macho";

  
    rocksdb::Status s = db->Put(rocksdb::WriteOptions(),key1, value1);
    if (s.ok()) s = db->Put(rocksdb::WriteOptions(),key2, value2);
    if (s.ok()) s = db->Put(rocksdb::WriteOptions(),key3, value3);

   // if (status.ok()) status = db->Put(rocksdb::WriteOptions(), key1, &u);
   // if (s.ok()) s = db->Delete(rocksdb::WriteOptions(), key1);
   // if (status.ok()) s = db->Get(rocksdb::ReadOptions(), key1, &value);
 	//std::cout << value.getUsername() << std::endl;
 	/*if (status.ok()){
 		rocksdb::WriteBatch batch;
 		batch.Delete(key1);
 		value.getUsername();
 		batch.Put(key2,value);
 		status = db->Write(rocksdb::WriteOptions(),&batch);
 	}
 	if (status.ok()) status = db ->Get(rocksdb::ReadOptions(),key1,&value);
    std::cout << "key1 = " << value << std::endl;

 */
/*
rocksdb::Slice var = "hola";
std::string var_st = var.ToString();
std::cout << var_st << std::endl;
*/
   auto iter = db->NewIterator(rocksdb::ReadOptions());
   rocksdb::Slice prefix = "ey";
   //iter->Seek(key);

   for (iter->Seek(prefix); iter->Valid() && iter->key().starts_with(prefix); iter->Next()){
	std::cout << iter->key().ToString() << " : " << iter->value().ToString() << std::endl;
   }

   std::cout << "Termino el test" << std::endl;

    delete db;

    return 0;
}
